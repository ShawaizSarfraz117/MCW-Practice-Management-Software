generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Appointment {
  id                       String           @id @default(uuid())
  type                     String
  title                    String?
  is_all_day               Boolean          @default(false)
  start_date               DateTime
  end_date                 DateTime
  location                 String?
  created_by               String
  status                   String
  client_id                String?
  clinician_id             String?
  appointment_fee          Decimal?
  service_id               String?
  is_recurring             Boolean          @default(false)
  recurring_rule           String?
  cancel_appointments      Boolean?
  notify_cancellation      Boolean?
  recurring_appointment_id String?
  Client                   Client?          @relation(fields: [client_id], references: [id])
  Clinician                Clinician?       @relation(fields: [clinician_id], references: [id])
  User                     User             @relation(fields: [created_by], references: [id])
  Appointment              Appointment?     @relation("AppointmentToAppointment", fields: [recurring_appointment_id], references: [id])
  other_Appointment        Appointment[]    @relation("AppointmentToAppointment")
  PracticeService          PracticeService? @relation(fields: [service_id], references: [id])
  AppointmentTag           AppointmentTag[]
  Invoice                  Invoice[]
  SurveyAnswers            SurveyAnswers[]
}

model AppointmentTag {
  id             String      @id @default(uuid())
  appointment_id String
  tag_id         String
  Appointment    Appointment @relation(fields: [appointment_id], references: [id])
  Tag            Tag         @relation(fields: [tag_id], references: [id])

  @@unique([appointment_id, tag_id])
  @@index([appointment_id])
  @@index([tag_id])
}

model Audit {
  Id         String   @id @default(uuid())
  client_id  String?
  user_id    String?
  datetime   DateTime @default(now())
  event_type String?
  event_text String
  is_hipaa   Boolean  @default(false)
  Client     Client?  @relation(fields: [client_id], references: [id])
  User       User?    @relation(fields: [user_id], references: [id])
}

model Client {
  id                       String                     @id @default(uuid())
  legal_first_name         String
  legal_last_name          String
  is_waitlist              Boolean                    @default(false)
  primary_clinician_id     String?
  primary_location_id      String?
  created_at               DateTime                   @default(now())
  is_active                Boolean                    @default(true)
  preferred_name           String?
  date_of_birth            DateTime?
  referred_by              String?
  Appointment              Appointment[]
  Audit                    Audit[]
  Clinician                Clinician?                 @relation(fields: [primary_clinician_id], references: [id])
  Location                 Location?                  @relation(fields: [primary_location_id], references: [id])
  ClientContact            ClientContact[]
  ClientGroupMembership    ClientGroupMembership[]
  ClientReminderPreference ClientReminderPreference[]
  ClinicianClient          ClinicianClient[]
  CreditCard               CreditCard[]
  SurveyAnswers            SurveyAnswers[]
}

model ClientContact {
  id           String  @id @default(uuid())
  client_id    String
  is_primary   Boolean @default(false)
  permission   String
  contact_type String
  type         String
  value        String
  Client       Client  @relation(fields: [client_id], references: [id])
}

model ClientGroup {
  id                    String                  @id
  type                  String
  name                  String
  ClientGroupMembership ClientGroupMembership[]
  Invoice               Invoice[]
}

model ClientGroupMembership {
  client_group_id            String      @default(uuid())
  client_id                  String
  role                       String?
  created_at                 DateTime    @default(now())
  is_contact_only            Boolean     @default(false)
  is_responsible_for_billing Boolean?
  Client                     Client      @relation(fields: [client_id], references: [id])
  ClientGroup                ClientGroup @relation(fields: [client_group_id], references: [id])

  @@id([client_group_id, client_id])
  @@index([client_id])
}

model ClientReminderPreference {
  id            String  @id @default(uuid())
  client_id     String
  reminder_type String
  is_enabled    Boolean @default(true)
  Client        Client  @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@unique([client_id, reminder_type])
}

model Clinician {
  id                String              @id @default(uuid())
  user_id           String              @unique
  address           String
  percentage_split  Float
  is_active         Boolean             @default(true)
  first_name        String
  last_name         String
  Appointment       Appointment[]
  Client            Client[]
  User              User                @relation(fields: [user_id], references: [id])
  ClinicianClient   ClinicianClient[]
  ClinicianLocation ClinicianLocation[]
  ClinicianServices ClinicianServices[]
  Invoice           Invoice[]
}

model ClinicianClient {
  client_id     String
  clinician_id  String
  is_primary    Boolean   @default(false)
  assigned_date DateTime  @default(now())
  Client        Client    @relation(fields: [client_id], references: [id])
  Clinician     Clinician @relation(fields: [clinician_id], references: [id])

  @@id([client_id, clinician_id])
}

model ClinicianLocation {
  clinician_id String
  location_id  String
  is_primary   Boolean   @default(false)
  Clinician    Clinician @relation(fields: [clinician_id], references: [id])
  Location     Location  @relation(fields: [location_id], references: [id])

  @@id([clinician_id, location_id])
}

model ClinicianServices {
  clinician_id    String
  service_id      String
  custom_rate     Decimal?
  is_active       Boolean         @default(true)
  Clinician       Clinician       @relation(fields: [clinician_id], references: [id])
  PracticeService PracticeService @relation(fields: [service_id], references: [id])

  @@id([clinician_id, service_id])
}

model Availability {
  id                    String    @id @default(uuid())
  clinician_id          String
  title                 String?
  allow_online_requests Boolean   @default(false)
  location              String?
  is_all_day           Boolean   @default(false)
  start_date           DateTime
  end_date             DateTime
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  is_recurring         Boolean   @default(false)
  recurring_rule       String?
  Clinician            Clinician @relation(fields: [clinician_id], references: [id])

  @@index([clinician_id])
  @@index([start_date, end_date])
}

model CreditCard {
  id              String    @id @default(uuid())
  client_id       String
  card_type       String
  last_four       String
  expiry_month    Int
  expiry_year     Int
  cardholder_name String
  is_default      Boolean   @default(false)
  billing_address String?
  token           String?
  created_at      DateTime  @default(now())
  Client          Client    @relation(fields: [client_id], references: [id])
  Payment         Payment[]
}

model Invoice {
  id              String       @id @default(uuid())
  invoice_number  String
  client_group_id String?
  appointment_id  String?
  clinician_id    String
  issued_date     DateTime     @default(now())
  due_date        DateTime
  amount          Decimal
  status          String
  Appointment     Appointment? @relation(fields: [appointment_id], references: [id])
  ClientGroup     ClientGroup? @relation(fields: [client_group_id], references: [id])
  Clinician       Clinician    @relation(fields: [clinician_id], references: [id])
  Payment         Payment[]
}

model Location {
  id                String              @id @default(uuid())
  name              String
  address           String
  is_active         Boolean             @default(true)
  Appointment       Appointment[]
  Client            Client[]
  ClinicianLocation ClinicianLocation[]
}

model Payment {
  id             String      @id @default(uuid())
  invoice_id     String
  payment_date   DateTime    @default(now())
  amount         Decimal
  credit_card_id String?
  transaction_id String?
  status         String
  response       String?
  CreditCard     CreditCard? @relation(fields: [credit_card_id], references: [id])
  Invoice        Invoice     @relation(fields: [invoice_id], references: [id])
}

model PracticeService {
  id                String              @id @default(uuid())
  type              String
  rate              Decimal
  code              String              @unique
  description       String?
  duration          Int
  color             String?
  Appointment       Appointment[]
  ClinicianServices ClinicianServices[]
}

model Role {
  id       String     @id @default(uuid())
  name     String
  UserRole UserRole[]
}

model SurveyAnswers {
  id             String         @id @default(uuid())
  template_id    String
  client_id      String
  content        String?
  frequency      String?
  completed_at   DateTime?
  assigned_at    DateTime       @default(now())
  expiry_date    DateTime?
  status         String
  appointment_id String?
  is_signed      Boolean?
  is_locked      Boolean?
  Client         Client         @relation(fields: [client_id], references: [id])
  SurveyTemplate SurveyTemplate @relation(fields: [template_id], references: [id])
  Appointment    Appointment?   @relation(fields: [appointment_id], references: [id])
}

model SurveyTemplate {
  id                 String          @id @default(uuid())
  name               String
  content            String
  frequency_options  String?
  is_active          Boolean         @default(true)
  created_at         DateTime        @default(now())
  description        String?
  updated_at         DateTime
  type               String
  requires_signature Boolean         @default(false)
  SurveyAnswers      SurveyAnswers[]
}

model sysdiagrams {
  name         String
  principal_id Int
  diagram_id   Int    @id @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name])
}

model Tag {
  id             String           @id @default(uuid())
  name           String
  color          String?
  AppointmentTag AppointmentTag[]
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password_hash String
  last_login    DateTime?
  Appointment   Appointment[]
  Audit         Audit[]
  Clinician     Clinician?
  UserRole      UserRole[]
}

model UserRole {
  user_id String
  role_id String
  Role    Role   @relation(fields: [role_id], references: [id])
  User    User   @relation(fields: [user_id], references: [id])

  @@id([user_id, role_id])
}
