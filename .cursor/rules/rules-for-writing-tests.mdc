---
description: 
globs: *test*
alwaysApply: false
---
# Testing Guidelines for MCW Practice Management Software

This document provides comprehensive guidelines for writing tests in the MCW Practice Management Software codebase. Following these guidelines ensures consistency, quality, and maintainability of tests.

## Table of Contents

1. [Test Types](mdc:#test-types)
2. [File Structure and Naming](mdc:#file-structure-and-naming)
3. [Test Setup and Teardown](mdc:#test-setup-and-teardown)
4. [Mock Data and Factories](mdc:#mock-data-and-factories)
5. [API Route Testing](mdc:#api-route-testing)
6. [Utility Function Testing](mdc:#utility-function-testing)
7. [Error Handling Testing](mdc:#error-handling-testing)
8. [Testing with Authentication](mdc:#testing-with-authentication)
9. [Best Practices](mdc:#best-practices)

## Test Types

### Unit Tests

Unit tests focus on testing individual functions or methods in isolation, with all dependencies mocked.

- **File Extension**: `.unit.test.ts`
- **Purpose**: Verify that a specific piece of code works as expected in isolation.
- **Mocking**: Mock all external dependencies (database, other modules, etc.).
- **Coverage**: Test all code paths, including error cases.
- **Example**: `apps/back-office/__tests__/api/location/route.unit.test.ts`

- Keep running `npx vitest apps/back-office/__tests__/api/**test-path**` in a loop **until all test cases pass without any failure**. Exit only when the test result is fully green (i.e., no failing or pending tests).

### Integration Tests

Integration tests verify that different components work together correctly, often involving the database.

- **File Extension**: `.integration.test.ts`
- **Purpose**: Verify that components interact correctly with each other and external systems like the database.
- **Database**: Use the actual database with proper setup and teardown.
- **Example**: `apps/back-office/__tests__/api/location/route.integration.test.ts`

After creating each test:
   - Auto-run the test suite
   - Fix any failing tests immediately
   - Ensure 100% type safety before moving on

Follow testing guidelines from context:
   - Use test data factories
   - Verify database state changes
   - Include edge case scenarios
   - Mock external dependencies
   
## File Structure and Naming

- Place tests in the `apps/<app-name>/__tests__` directory, mirroring the structure of the `src` directory.
- Test filenames should match the file they are testing with a `.unit.test.ts` or `.integration.test.ts` suffix.
- use `import { createRequestWithBody, createRequest } from "@mcw/utils"` to create request

## Test Setup and Teardown

### Basic Setup

```typescript
import { describe, it, expect, vi, beforeEach } from "vitest";

describe("Component Name", () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  // Your tests here
});
```

### Database Setup for Integration Tests

```typescript
import { prisma } from "@mcw/database";
import { cleanDatabase } from "@/vitest.setup";

describe("Component Name", () => {
  beforeEach(async () => {
    await cleanDatabase();
  });

  // Your tests here
});
```

## Mock Data and Factories

### Using Mock Data

```typescript
import { mockUser, mockClient } from "@mcw/database";

const testUser = {
  id: mockUser.id,
  email: mockUser.email,
  // ... other properties
};
```

### Creating Test Data

```typescript
// For unit tests - use mock data
const mockData = {
  id: "test-id",
  name: "Test Name",
  // ... other properties
};

// For integration tests - use database factories or direct creation
const realData = await prisma.model.create({
  data: {
    name: "Test Name",
    // ... other properties
  },
});
```

## API Route Testing

### Unit Test Example

```typescript
// apps/back-office/__tests__/api/location/route.unit.test.ts
import { describe, it, expect, vi, beforeEach } from "vitest";
import { GET, POST, PUT, DELETE } from "@/app/api/location/route";
import { createRequest, createRequestWithBody } from "@mcw/utils";
import { NextRequest } from "next/server";

// Mock the database
vi.mock("@mcw/database", () => ({
  prisma: {
    location: {
      findMany: vi.fn(),
      create: vi.fn(),
      update: vi.fn(),
      delete: vi.fn(),
    },
  },
}));

describe("GET /api/location", () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it("should return locations successfully", async () => {
    const mockLocations = [{ id: "1", name: "Location 1" }];
    prisma.location.findMany.mockResolvedValue(mockLocations);

    const request = createRequest("http://localhost:3000/api/location");
    const response = await GET(request);
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data).toEqual(mockLocations);
  });

  it("should handle errors gracefully", async () => {
    prisma.location.findMany.mockRejectedValue(new Error("Database error"));

    const request = createRequest("http://localhost:3000/api/location");
    const response = await GET(request);
    const data = await response.json();

    expect(response.status).toBe(500);
    expect(data.error).toBeDefined();
  });
});

describe("POST /api/location", () => {
  it("should create a location successfully", async () => {
    const newLocation = { name: "New Location", is_online: false };
    const createdLocation = { id: "1", ...newLocation };
    
    prisma.location.create.mockResolvedValue(createdLocation);

    const request = createRequestWithBody(
      "http://localhost:3000/api/location",
      newLocation
    );
    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(201);
    expect(data).toEqual(createdLocation);
  });
});
```

### Integration Test Example

```typescript
// apps/back-office/__tests__/api/location/route.integration.test.ts
import { describe, it, expect, beforeEach } from "vitest";
import { GET, POST, PUT, DELETE } from "@/app/api/location/route";
import { createRequest, createRequestWithBody } from "@mcw/utils";
import { prisma } from "@mcw/database";
import { cleanDatabase } from "@/vitest.setup";

describe("Location API Integration", () => {
  beforeEach(async () => {
    await cleanDatabase();
  });

  it("should create and retrieve a location", async () => {
    // Create location
    const newLocation = { name: "Test Location", is_online: false };
    const createRequest = createRequestWithBody(
      "http://localhost:3000/api/location",
      newLocation
    );
    const createResponse = await POST(createRequest);
    const createdLocation = await createResponse.json();

    expect(createResponse.status).toBe(201);
    expect(createdLocation.name).toBe(newLocation.name);

    // Retrieve locations
    const getRequest = createRequest("http://localhost:3000/api/location");
    const getResponse = await GET(getRequest);
    const locations = await getResponse.json();

    expect(getResponse.status).toBe(200);
    expect(locations).toHaveLength(1);
    expect(locations[0].id).toBe(createdLocation.id);
  });
});
```

## Utility Function Testing

### Example for Helper Functions

```typescript
// apps/back-office/__tests__/utils/helpers.test.ts
import { describe, it, expect } from "vitest";
import { formatDate, parseQueryParams } from "@/utils/helpers";

describe("formatDate", () => {
  it("should format date correctly", () => {
    const date = new Date("2024-01-01");
    expect(formatDate(date)).toBe("January 1, 2024");
  });

  it("should handle invalid dates", () => {
    expect(formatDate(null)).toBe("");
    expect(formatDate(undefined)).toBe("");
  });
});
```

## Error Handling Testing

### Testing Error Responses

```typescript
describe("Error Handling", () => {
  it("should return 400 for invalid input", async () => {
    const invalidData = { name: "" }; // Missing required field
    const request = createRequestWithBody(
      "http://localhost:3000/api/location",
      invalidData
    );
    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.error).toBeDefined();
  });

  it("should return 404 for non-existent resource", async () => {
    const request = createRequest(
      "http://localhost:3000/api/location?id=non-existent"
    );
    const response = await GET(request);
    const data = await response.json();

    expect(response.status).toBe(404);
    expect(data.error).toBe("Location not found");
  });

  it("should handle database errors", async () => {
    // For unit tests
    prisma.location.findMany.mockRejectedValue(new Error("Connection failed"));

    const request = createRequest("http://localhost:3000/api/location");
    const response = await GET(request);
    const data = await response.json();

    expect(response.status).toBe(500);
    expect(data.error).toBeDefined();
  });
});
```

## Testing with Authentication

### Mocking Authentication

```typescript
// Mock getServerSession for unit tests
vi.mock("next-auth/next", () => ({
  getServerSession: vi.fn().mockResolvedValue({
    user: {
      id: "user-123",
      email: "test@example.com",
      role: "ADMIN",
    },
  }),
}));

// Mock getClinicianInfo
vi.mock("@/utils/helpers", () => ({
  getClinicianInfo: vi.fn().mockResolvedValue({
    id: "clinician-123",
    practice_id: "practice-123",
  }),
}));
```

### Testing Protected Routes

```typescript
describe("Protected Routes", () => {
  it("should allow access for authenticated users", async () => {
    // getServerSession is already mocked to return a user
    const request = createRequest("http://localhost:3000/api/protected");
    const response = await GET(request);

    expect(response.status).toBe(200);
  });

  it("should deny access for unauthenticated users", async () => {
    // Mock no session
    getServerSession.mockResolvedValueOnce(null);

    const request = createRequest("http://localhost:3000/api/protected");
    const response = await GET(request);

    expect(response.status).toBe(401);
  });
});
```

## Best Practices

### 1. Clear and Descriptive Test Names

```typescript
// Good
it("should return 404 when location ID does not exist", async () => {});

// Bad
it("test location", async () => {});
```

### 2. Follow AAA Pattern

```typescript
it("should update location successfully", async () => {
  // Arrange
  const locationId = "123";
  const updateData = { name: "Updated Name" };

  // Act
  const request = createRequestWithBody(
    `http://localhost:3000/api/location?id=${locationId}`,
    updateData
  );
  const response = await PUT(request);

  // Assert
  expect(response.status).toBe(200);
});
```

### 3. Test Edge Cases

```typescript
describe("Edge Cases", () => {
  it("should handle empty arrays", async () => {
    prisma.location.findMany.mockResolvedValue([]);
    // ... test implementation
  });

  it("should handle maximum length strings", async () => {
    const longName = "a".repeat(255);
    // ... test implementation
  });

  it("should handle special characters", async () => {
    const specialName = "Location & Co. <Test>";
    // ... test implementation
  });
});
```

### 4. Mock External Dependencies

```typescript
// Mock external services
vi.mock("@/services/email", () => ({
  sendEmail: vi.fn().mockResolvedValue(true),
}));

// Mock file system operations
vi.mock("fs/promises", () => ({
  readFile: vi.fn().mockResolvedValue("file content"),
  writeFile: vi.fn().mockResolvedValue(undefined),
}));
```

### 5. Clean Up After Tests

```typescript
describe("Test Suite", () => {
  afterEach(() => {
    vi.clearAllMocks();
  });

  afterAll(async () => {
    // Clean up any resources if needed
    await prisma.$disconnect();
  });
});
```

### 6. Use Type-Safe Assertions

```typescript
import { Location } from "@prisma/client";

it("should return location with correct type", async () => {
  const response = await GET(request);
  const data: Location = await response.json();

  // TypeScript will ensure data matches Location type
  expect(data.id).toBeDefined();
  expect(data.name).toBeDefined();
});
```

### 7. Group Related Tests

```typescript
describe("Location API", () => {
  describe("GET /api/location", () => {
    describe("when fetching all locations", () => {
      it("should return paginated results", async () => {});
      it("should filter by is_online status", async () => {});
    });

    describe("when fetching a single location", () => {
      it("should return location by ID", async () => {});
      it("should return 404 for non-existent ID", async () => {});
    });
  });

  describe("POST /api/location", () => {
    // ... POST tests
  });
});
```

### 8. Test Pagination

```typescript
describe("Pagination", () => {
  it("should return correct page of results", async () => {
    const request = createRequest(
      "http://localhost:3000/api/location?page=2&limit=10"
    );
    const response = await GET(request);
    const data = await response.json();

    expect(data.pagination).toEqual({
      page: 2,
      limit: 10,
      total: expect.any(Number),
      totalPages: expect.any(Number),
    });
    expect(data.data.length).toBeLessThanOrEqual(10);
  });
});
```

### 9. Test Data Validation

```typescript
describe("Input Validation", () => {
  it("should validate required fields", async () => {
    const invalidData = { is_online: true }; // Missing required 'name'
    const request = createRequestWithBody(
      "http://localhost:3000/api/location",
      invalidData
    );
    const response = await POST(request);

    expect(response.status).toBe(400);
    const data = await response.json();
    expect(data.error).toContain("name");
  });

  it("should validate field types", async () => {
    const invalidData = { name: "Test", is_online: "not-a-boolean" };
    // ... test implementation
  });
});
```

### 10. Performance Considerations

```typescript
describe("Performance", () => {
  it("should handle large datasets efficiently", async () => {
    const largeDataset = Array(1000).fill(null).map((_, i) => ({
      id: `loc-${i}`,
      name: `Location ${i}`,
    }));
    prisma.location.findMany.mockResolvedValue(largeDataset);

    const start = Date.now();
    const response = await GET(request);
    const duration = Date.now() - start;

    expect(response.status).toBe(200);
    expect(duration).toBeLessThan(1000); // Should complete within 1 second
  });
});
```

### Dealing with JSON Serialization

When asserting against `response.json()`, account for JSON serialization. Types like `Date` and `Decimal` will be converted to strings. Compare against expected data that has been similarly serialized:

```typescript
// Example assertion for an array of objects with Date and Decimal
const responseData = await response.json();
const expectedSerializedData = mockDataArray.map(item => ({
  ...item,
  createdAt: item.createdAt.toISOString(), // Serialize Date
  price: item.price.toString(),         // Serialize Decimal
}));
expect(responseData).toEqual(expectedSerializedData);
```


